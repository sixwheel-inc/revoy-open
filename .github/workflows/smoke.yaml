name: smoke
concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  REGISTRY_USER: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ github.token }}
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
on:
  pull_request:
    types: [opened, reopened, synchronize]

  push:
    branch:
      - main

  schedule:
  # picked an non-round number to avoid peaks at top-of-hour
  - cron: '13 9 * * 1,2,3,4,5'

jobs:
  container-bazel-test:
    runs-on: ubuntu-latest
    steps:
      - name: Get the code.
        uses: actions/checkout@v3

      - name: Get cached (or create new) hermetic container (used for repeatable tests).
        id: get-image
        run: ./ci-runner/get-image.sh ${{ env.IMAGE_REGISTRY }}/revoy-open:${{ hashFiles('containers/buildah-image.sh') }}
        continue-on-error: true

      - name: Use buildah script to make new hermetic container.
        if: ${{ steps.get-image.outcome != 'success' }}
        run: ./containers/buildah-image.sh ${{ hashFiles('containers/buildah-image.sh') }}
        shell: bash

      - name: Update image cache with new hermetic container.
        uses: redhat-actions/push-to-registry@v2
        if: ${{ steps.get-image.outcome != 'success' }}
        with:
          image: revoy-open
          tags: ${{ hashFiles('containers/buildah-image.sh') }}
          registry: ${{ env.IMAGE_REGISTRY }}

      - name: (Debug) Use this URL to access this image.
        if: ${{ steps.get-image.outcome != 'success' }}
        run: echo "Image pushed to " ${{ env.IMAGE_REGISTRY }}/revoy-open:${{ hashFiles('containers/buildah-image.sh') }}

      - name: Setup a coarse Bazel Cache, to avoid rebuilding stable deps.
        uses: bazel-contrib/setup-bazel@0.13.0
        with:
          disk-cache: true
          external-cache: true
          repository-cache: true

      - name: Clean up repo after building the image
        run: git clean -fdx . && git reset --hard

      - name: Ensure code formatters (clang-tidy, black, buildifier) report no errors.
        run: ./.github/workflows/scripts/podman-check-formatting.sh ${{ env.IMAGE_REGISTRY }}/revoy-open:${{ hashFiles('containers/buildah-image.sh') }}

      - name: Run unittests.
        run: ./.github/workflows/scripts/podman-unit-test.sh ${{ env.IMAGE_REGISTRY }}/revoy-open:${{ hashFiles('containers/buildah-image.sh') }}
        shell: bash

        # the following will only trigger on pull_request where the body 
        # contains the string "run-chrono-tests", on main, or on the scheduled run.
      - name: Check if PR Body contains 'run-chrono-test' trigger string
        if: github.event_name == 'pull_request'
        id: pr-comment-check
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"
          TRIGGER_STRING="run-chrono-tests"
          if [[ "$PR_BODY" == *"$TRIGGER_STRING"* ]]; then
            echo "PR description contains the trigger string '$TRIGGER_STRING', running the workflow...";
            exit 0
          else
            echo "PR description does not contain the trigger string '$TRIGGER_STRING', exiting workflow.";
            exit 1
          fi
        continue-on-error: true

      - name: Run tests that rely on projectchrono dependency
        if: steps.pr-comment-check.outcome == 'success' || github.ref == 'refs/heads/main'
        run: ./.github/workflows/scripts/podman-chrono-test.sh ${{ env.IMAGE_REGISTRY }}/revoy-open:${{ hashFiles('containers/buildah-image.sh') }}
        shell: bash

      - name: Upload simulation (chrono) mcaps
        if: steps.pr-comment-check.outcome == 'success' || github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: chrono-mcaps-${{ github.sha }}
          path: |
            ${{ github.workspace }}/bazel-bin/zaxis/run-zaxis.runfiles/_main/*.mcap
